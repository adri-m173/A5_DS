import groovy.swing.SwingBuilder
plugins {
    id 'com.android.application'
    id "org.sonarqube" version "3.1.1"
    id("maven-publish")
}

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        applicationId "com.example.database"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "adri-m173_A5_DS"
        property "sonar.organization", "adri-m173"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", "0ffbc0dc8a0ae5118e26d65e6f91ceb5bd73dcbd"
        property "sonar.branch.name", System.getenv("BRANCH")
    }
}

String branch

task gitBranch {
    description "Esta tarea devuelve el nombre de la rama actual"
    branch = ""
    def branch_proc = 'git rev-parse --abbrev-ref HEAD'.execute()
    branch_proc.in.eachLine { line -> branch = line }
    branch_proc.err.eachLine { line -> println line }
    branch_proc.waitFor()
}

task gitPull {
    description "git pull en la rama actual o si pasamos -PbranchName='name-of-the-branch' haremos el pull en esa rama"
    dependsOn "gitBranch"
    doLast {
        exec {
            if (project.hasProperty('branchName')) {
                branch = branchName
            }
            commandLine "git", "pull", "origin", branch.toString()
        }
    }
}

task gitAdd {
    description "Esta tarea a√±ade todos los elementos modificados"
    doLast {
        exec {
            commandLine "git", "add", "*"
        }
    }
}

task gitCommit {
    description "Esta tarea hace un commit con todos los elementos modificados con un mensaje que introduces"
    doLast {
        System.setProperty('java.awt.headless', 'false')
        new SwingBuilder().edt {
            dialog(modal: true, title: 'Introduce el mensaje para el commit', alwaysOnTop: true, resizable: false, locationRelativeTo: null, pack: true, show: true) {
                vbox {
                    label(text: "Introduce el mensaje para el commit:")
                    def input1 = textField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        commitMessage = input1.text;
                        dispose();
                        exec {
                            commandLine "git", "commit", "-m", commitMessage
                        }
                    })
                }
            }
        }
    }
}

gitPush {
    description "git push en la rama actual"
    dependsOn "gitBranch"
    doLast {
        exec {
            commandLine "git", "push", "origin", branch.toString()
        }
    }
}

task gitCompletePush {
    description "Esta tarea hace todo el proceso para hacer un push (add, commit y push)"
    dependsOn "gitAdd"
    dependsOn "gitCommit"
    dependsOn "gitPush"
    tasks.findByName("gitCommit").mustRunAfter "gitAdd"
    tasks.findByName("gitPush").mustRunAfter "gitCommit"
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    implementation 'androidx.navigation:navigation-fragment:2.2.2'
    implementation 'androidx.navigation:navigation-ui:2.2.2'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}